// JS 单线程 -- 同一时间只能做一件事
// js是为处理页面中用户的交互，以及操作DOM诞生的
// 任务需要排队，前一个任务结束，才会执行后一个任务，导致JS执行时间过长，造成页面的渲染不连贯，导致页面渲染加载阻塞

// 利用多核CPU的计算能力，HTML5提出web worker标准，允许JS脚本创建多个线程
// 同步 -- 前一个任务结束之后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的
// 异步 -- 允许同时执行多个任务

// 1,2,hello
// 结果解析 --
// 同步任务都在主线程上执行，形成一个执行栈
// 异步任务相关回调函数添加到任务队列（消息队列）中
// 1.普通事件 click,resize
// 2.资源加载 load,error
// 3.定时器，包括setInterval,setTimeout等
console.log(1);

setTimeout(() => {
  console.log("Hello");
}, 0);
console.log(2);

// JS执行机制
// 1.先执行执行栈中的同步任务
// 2.异步任务（回调函数）放入任务队列中
// 3.一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行


// 例子
